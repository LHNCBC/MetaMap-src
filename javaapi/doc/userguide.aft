*Title: Using the MetaMap Java API
*Author: Willie Rogers

* Purpose

MetaMap maps terms occuring in text to UMLS Metathesaurus concepts. As
part of this mapping process, MetaMap tokenizes text into sections,
sentences, phrases, terms, and words. MetaMap maps the noun phrases of
the text to the best matching UMLS concept or set of concepts that
best cover each phrase.  The MetaMap Java API provides java programs
with programmatic access to MetaMap mapping engine.

* MetaMap API's underlying Architecture

MetaMap mapping engine is written primarily in Quintus Prolog, to
facilitate its use by Java programs system uses PrologBeans to provide a
loose coupling between the Java API and the mapping engine. 
See the Quintus Prolog PrologBeans documentation for more information
(http://www.sics.se/isl/quintus/html/quintus/pbn.html).

* Pre-requisites

The full MetaMap download and installation is required to use the
MetaMap Java API (see \http://metamap.nlm.nih.gov/#Downloads).  Also,
Java 1.6 SDK or greater is required.  (It should work Java 1.5 but it
has not been tested with Java 1.5)

* Downloading, Extracting and Installing the API distribution

In the directory where you install the Public Metamap (the directory
containing the public__mm directory) extract the javaapi archive:

^<<
$ bzip2 -dc /nfsvol/nlsaux15/public_mm_dist/workingdir/public_mm_linux_javaapi_2009.tar.bz2 | tar xvf -
^>>

If you plan on modifying the sources to the prolog-based MetaMap
server (mmserver) you will need to download and extract the source
archive
(http://metamap.nlm.nih.gov/download/public__mm__src__2009.tar.bz2) as
well:

^<<
$ bzip2 -dc /nfsvol/nlsaux15/public_mm_dist/workingdir/public_mm_src_2009.tar.bz2 | tar xvf -
^>>

You will need to re-run ./bin/install.sh from the public__mm directory
to setup the files for javaapi.

^<<
$ ./bin/install.sh
^>>

* Running the metamap server

The metamap server (mmserver) must first be running to use the Java
API.  If the SKR/Medpost Tagger is not already running start it using
the following command:

^<<
$ ./bin/skrmedpostctl start
^>> 

If you wish to the Word Sense Disambiguation (WSD) Server (optional),
start it also.

^<<
$ ./bin/wsdserverctl start
^>>

Then start the metamap server:

^<<
$ ./bin/mmserver

MetaMap (2008)


Control options:
  machine_output
Berkeley DB databases (normal strict 09 model) are open.
Static variants will come from table varsan in /nfsvol/nls3aux18/DB//DB.normal.09.strict.
Derivational Variants: Adj/noun ONLY.
Accessing lexicon /nfsvol/nls/specialist/SKR/src/lexicon//data/lexiconStatic2009.
Variant generation mode: static.
^>>

* Testing the API 

Using another terminal, you can verify that api is running using the
program |testapi.sh| which takes a query as an argument:

^<<
$ ./bin/testapi.sh laboratory culture
aString: laboratory culture 
bindings: [E="laboratory culture "]
answer: [args(MetaMap ,[-(infile,user_input),-(outfile,user_output)]),aas([]),neg_list([]),utterance(00000000.tx.1,laboratory culture ,/(0,19),[]),phrase(laboratory culture,[head([lexmatch([laboratory culture]),inputmatch([laboratory,culture]),tag(noun),tokens([laboratory,culture])])],/(0,18),[]),candidates([ev(-1000,C0430400,Laboratory culture,Laboratory culture,[laboratory,culture],[lbpr],[[^A^B,^A^B,0]],yes,no,[MTH,LNC,MDR,NCI,RCD,MEDCIN,CCPSS,SNOMEDCT],[/(0,18)]),ev(-861,C0010453,Culture,Anthropological Culture,[culture],[idcn],[[^B^B,^A^A,0]],yes,no,[MTH,PSY,ICNP,LCH,MSH,NCI,CSP],[/(11,7)]),ev(-861,C0022877,Laboratory,Laboratory,[laboratory],[mnob,orgt],[[^A^A,^A^A,0]],yes,no,[LNC,MSH,MTH,NCI,RCD,SNOMEDCT,OMIM,LCH,ALT],[/(0,10)]),ev(-861,C0220814,culture,Cultural aspects,[culture],[ftcn],[[^B^B,^A^A,0]],yes,no,[MTH,MSH],[/(11,7)]),ev(-861,C0430400,Culture,Laboratory culture,[culture],[lbpr],[[^B^B,^A^A,0]],yes,no,[MTH,LNC,MDR,NCI,RCD,MEDCIN,CCPSS,SNOMEDCT],[/(11,7)]),ev(-861,C1706355,CULTURE,Culture Dose Form,[culture],[bodm],[[^B^B,^A^A,0]],yes,no,[MTH,NCI],[/(11,7)]),ev(-861,C2242979,Culture,Microbial culture (procedure),[culture],[lbpr],[[^B^B,^A^A,0]],yes,no,[MTH,SNOMEDCT,SNM,SNMI],[/(11,7)]),ev(-827,C1619828,Laboratories,Laboratories - NUCCProvider Codes,[laboratories],[inpr],[[^A^A,^A^A|^A]],yes,no,[MTH,HL7V3.0],[/(0,10)])]),mappings([map(-1000,[ev(-1000,C0430400,Laboratory culture,Laboratory culture,[laboratory,culture],[lbpr],[[^A^B,^A^B,0]],yes,no,[MTH,LNC,MDR,NCI,RCD,MEDCIN,CCPSS,SNOMEDCT],[/(0,18)])])])]
Acronyms and Abbreviations:
 None.
Negations:
 None.
Utterance:
 Id: 00000000.tx.1
 Utterance text: laboratory culture 
 Position: (0, 19)
 Position in Machine Output: 4
Phrase:
 text: laboratory culture
Candidates:
 Candidate:
  Score: -1000
  Concept Id: C0430400
  Concept Name: Laboratory culture
  Preferred Name: Laboratory culture
  Matched Words: [laboratory, culture]
  Semantic Types: [lbpr]
  is Head?: true
  is Overmatch?: false
  Sources: [MTH, LNC, MDR, NCI, RCD, MEDCIN, CCPSS, SNOMEDCT]
  Positional Info: [(0, 18)]
 Candidate:
  Score: -861
  Concept Id: C0010453
  Concept Name: Culture
  Preferred Name: Anthropological Culture
  Matched Words: [culture]
  Semantic Types: [idcn]
  is Head?: true
  is Overmatch?: false
  Sources: [MTH, PSY, ICNP, LCH, MSH, NCI, CSP]
  Positional Info: [(11, 7)]
 Candidate:
  Score: -861
  Concept Id: C0022877
  Concept Name: Laboratory
  Preferred Name: Laboratory
  Matched Words: [laboratory]
  Semantic Types: [mnob, orgt]
  is Head?: true
  is Overmatch?: false
  Sources: [LNC, MSH, MTH, NCI, RCD, SNOMEDCT, OMIM, LCH, ALT]
  Positional Info: [(0, 10)]
 Candidate:
  Score: -861
  Concept Id: C0220814
  Concept Name: culture
  Preferred Name: Cultural aspects
  Matched Words: [culture]
  Semantic Types: [ftcn]
  is Head?: true
  is Overmatch?: false
  Sources: [MTH, MSH]
  Positional Info: [(11, 7)]
 Candidate:
  Score: -861
  Concept Id: C0430400
  Concept Name: Culture
  Preferred Name: Laboratory culture
  Matched Words: [culture]
  Semantic Types: [lbpr]
  is Head?: true
  is Overmatch?: false
  Sources: [MTH, LNC, MDR, NCI, RCD, MEDCIN, CCPSS, SNOMEDCT]
  Positional Info: [(11, 7)]
 Candidate:
  Score: -861
  Concept Id: C1706355
  Concept Name: CULTURE
  Preferred Name: Culture Dose Form
  Matched Words: [culture]
  Semantic Types: [bodm]
  is Head?: true
  is Overmatch?: false
  Sources: [MTH, NCI]
  Positional Info: [(11, 7)]
 Candidate:
  Score: -861
  Concept Id: C2242979
  Concept Name: Culture
  Preferred Name: Microbial culture (procedure)
  Matched Words: [culture]
  Semantic Types: [lbpr]
  is Head?: true
  is Overmatch?: false
  Sources: [MTH, SNOMEDCT, SNM, SNMI]
  Positional Info: [(11, 7)]
 Candidate:
  Score: -827
  Concept Id: C1619828
  Concept Name: Laboratories
  Preferred Name: Laboratories - NUCCProvider Codes
  Matched Words: [laboratories]
  Semantic Types: [inpr]
  is Head?: true
  is Overmatch?: false
  Sources: [MTH, HL7V3.0]
  Positional Info: [(0, 10)]
Mappings:
 Map Score: -1000
   Score: -1000
   Concept Id: C0430400
   Concept Name: Laboratory culture
   Preferred Name: Laboratory culture
   Matched Words: [laboratory, culture]
   Semantic Types: [lbpr]
   is Head?: true
   is Overmatch?: false
   Sources: [MTH, LNC, MDR, NCI, RCD, MEDCIN, CCPSS, SNOMEDCT]
   Positional Info: [(0, 18)]
$ 
^>>

The source to java class used |testapi.sh| is in
|./src/javaapi/sources/gov/nih/nlm/nls/metamap/MetaMapApiTest.java|.

* Using the API

** Instantiating the API

The following sections expose the source code used to produce the example output shown in previous section

^<<
MetaMapApi api = new MetaMapApiImpl();
^>>	

** Performing a query using the api

^<<
Result result = api.processString(terms);
^>>

** Interrogating to result

*** Getting Acronyms and Abbreviations

To get a list of all the acronyms and abbreviations occurring in the
input text use the instance method |Result.getAcronymsAbbrevs|:

^<<
List<AcronymsAbbrevs> aaList = result.getAcronymsAbbrevs();
System.out.println("Acronyms and Abbreviations:");
if (aaList.size() > 0) {
  for (AcronymsAbbrevs e: aaList) {
    System.out.println("Acronym: " + e.getAcronym());
    System.out.println("Expansion: " + e.getExpansion());
    System.out.println("Count list: " + e.getCountList());
    System.out.println("CUI list: " + e.getCUIList());
  }
} else {
  System.out.println(" None.");
}
^>>

*** Getting Negations

To get a list of all the negated concepts in the input text use the
instance method |Result.getNegations|:

^<<
System.out.println("Negations:");
List<Negation> negList = result.getNegations();
if (negList.size() > 0) {
  for (Negation e: negList) {
    System.out.println("type: " + e.getType());
    System.out.print("Trigger: " + e.getTrigger() + ": [");
    for (Position pos: e.getTriggerPositionList()) {
      System.out.print(pos  + ",");
    }
    System.out.println("]");
    System.out.print("ConceptPairs: [");
    for (ConceptPair pair: e.getConceptPairList()) {
      System.out.print(pair + ",");
    }
    System.out.println("]");
    System.out.print("ConceptPositionList: [");
    for (Position pos: e.getConceptPositionList()) {
      System.out.print(pos + ",");
    }
    System.out.println("]");
  }
} else {
	System.out.println(" None.");
}
^>>

*** Getting Utterances and Associated Phrases, Candidates, and Mappings

The instance method |Result.getUtteranceList()| produces a list of
the utterances present in the result:

^<<
for (Utterance utterance: result.getUtteranceList()) {
	System.out.println("Utterance:");
	System.out.println(" Id: " + utterance.getId());
	System.out.println(" Utterance text: " + utterance.getString());
	System.out.println(" Position: " + utterance.getPosition());
^>>

To get the list of phrases, candidates, and mappings associated with
an utterance use the instance method |Utterance.getPCMList|:

^<<
	for (PCM pcm: utterance.getPCMList()) {
^>>

Each phrase, and the list of candidates and mappings associated with
the phrase are encapsulated within a PCM instance.  Use |PCM.getPhrase|
to get the phrase instance residing within the PCM instance:

^<<
	  System.out.println("Phrase:");
	  System.out.println(" text: " + pcm.getPhrase().getPhraseText());
^>>

Similarly, get the candidate list using |PCM.getCandidates()|:

^<<
	  System.out.println("Candidates:");
	  for (Ev ev: pcm.getCandidates()) {
	    System.out.println(" Candidate:");
	    System.out.println("  Score: " + ev.getScore());
	    System.out.println("  Concept Id: " + ev.getConceptId());
	    System.out.println("  Concept Name: " + ev.getConceptName());
	    System.out.println("  Preferred Name: " + ev.getPreferredName());
	    System.out.println("  Matched Words: " + ev.getMatchedWords());
	    System.out.println("  Semantic Types: " + ev.getSemanticTypes());
	    System.out.println("  is Head?: " + ev.isHead());
	    System.out.println("  is Overmatch?: " + ev.isOvermatch());
	    System.out.println("  Sources: " + ev.getSources());
	    System.out.println("  Positional Info: " + ev.getPositionalInfo());
	  }
^>>

One can get the mappings list from the PCM instance using |PCM.getMappings|:

^<<
	  System.out.println("Mappings:");
	  for (Map map: pcm.getMappings()) {
	    System.out.println(" Map Score: " + map.getScore());
	    for (Ev mapEv: map.getEvList()) {
	      System.out.println("   Score: " + mapEv.getScore());
	      System.out.println("   Concept Id: " + mapEv.getConceptId());
	      System.out.println("   Concept Name: " + mapEv.getConceptName());
	      System.out.println("   Preferred Name: " + mapEv.getPreferredName());
	      System.out.println("   Matched Words: " + mapEv.getMatchedWords());
	      System.out.println("   Semantic Types: " + mapEv.getSemanticTypes());
	      System.out.println("   is Head?: " + mapEv.isHead());
	      System.out.println("   is Overmatch?: " + mapEv.isOvermatch());
	      System.out.println("   Sources: " + mapEv.getSources());
	      System.out.println("   Positional Info: " + mapEv.getPositionalInfo());
	    }
	  }
    }
}
^>>

Refer to the API javadoc for more information on the available methods
for each interface.


A complete example of this code is in
|src/javaapi/sources/gov/nih/nlm/nls/metamap/MetaMapApiTest.java|.

** Getting Raw MetaMap Machine Output


A copy of the raw MetaMap machine output can be obtained by using the
instance method |Result.getMachineOutput|:

^<<
Result result = api.processString(terms);
String machineOutput = result.getMachineOutput();
^>>

* For more information

	[Quintus Prolog] http://www.sics.se/isl/quintus/html/quintus/
	[PrologBeans] http://www.sics.se/sicstus/docs/3.12.9/html/prologbeans/
	[MetaMap] http://metamap.nlm.nih.gov/
